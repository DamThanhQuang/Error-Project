// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProcessErrorManagementApp.Data;

#nullable disable

namespace ProcessErrorManagementApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250714073527_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProcessErrorManagementApp.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ErrorAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProcessErrorId")
                        .HasColumnType("int");

                    b.Property<int>("UploadedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessErrorId");

                    b.HasIndex("UploadedById");

                    b.ToTable("ErrorAttachments");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ErrorComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProcessErrorId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessErrorId");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorComments");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ProcessErrorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessErrorId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ProcessError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AssignedDepartment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DetectedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ProcessStepId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessingNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductionProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProcessStepId");

                    b.HasIndex("ProductionProcessId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ProcessErrors");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ProcessStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductionProcessId")
                        .HasColumnType("int");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionProcessId");

                    b.ToTable("ProcessSteps");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ProductionProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProcessCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ProductionProcesses");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.AuditLog", b =>
                {
                    b.HasOne("ProcessErrorManagementApp.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ErrorAttachment", b =>
                {
                    b.HasOne("ProcessErrorManagementApp.Models.ProcessError", "ProcessError")
                        .WithMany("Attachments")
                        .HasForeignKey("ProcessErrorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcessErrorManagementApp.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessError");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ErrorComment", b =>
                {
                    b.HasOne("ProcessErrorManagementApp.Models.ProcessError", "ProcessError")
                        .WithMany("Comments")
                        .HasForeignKey("ProcessErrorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcessErrorManagementApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessError");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.Notification", b =>
                {
                    b.HasOne("ProcessErrorManagementApp.Models.ProcessError", "ProcessError")
                        .WithMany()
                        .HasForeignKey("ProcessErrorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProcessErrorManagementApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessError");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ProcessError", b =>
                {
                    b.HasOne("ProcessErrorManagementApp.Models.User", "AssignedTo")
                        .WithMany("AssignedErrors")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProcessErrorManagementApp.Models.User", "CreatedBy")
                        .WithMany("CreatedErrors")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProcessErrorManagementApp.Models.ProcessStep", "ProcessStep")
                        .WithMany()
                        .HasForeignKey("ProcessStepId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProcessErrorManagementApp.Models.ProductionProcess", "ProductionProcess")
                        .WithMany("Errors")
                        .HasForeignKey("ProductionProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProcessErrorManagementApp.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");

                    b.Navigation("ProcessStep");

                    b.Navigation("ProductionProcess");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ProcessStep", b =>
                {
                    b.HasOne("ProcessErrorManagementApp.Models.ProductionProcess", "ProductionProcess")
                        .WithMany("Steps")
                        .HasForeignKey("ProductionProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionProcess");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ProcessError", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.ProductionProcess", b =>
                {
                    b.Navigation("Errors");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("ProcessErrorManagementApp.Models.User", b =>
                {
                    b.Navigation("AssignedErrors");

                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedErrors");
                });
#pragma warning restore 612, 618
        }
    }
}
